import "fastfiles/constants.rb"
import "fastfiles/setup.rb"
import "fastfiles/match.rb"

if File.exist?('../.env')
  open('../.env', 'r').readlines.each do |l|
    kv = l.split('=')
    ENV[kv[0]] = kv[1].chomp
  end
end

default_platform :ios

platform :ios do

  def get_changelog
    return changelog_from_git_commits(
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: true,
      merge_commit_filtering: "exclude_merges"
    )
  end

  lane :match_stage do
    puts "111"
    puts WORKSPACE
    puts "111" + WORKSPACE
    match_development
    match_app_store
    match_adhoc
  end

  lane :upload_testflight do 
    tests_stage
    build_stage
    testflight_stage
  end
  
  lane :tests_stage do
    run_tests(scheme: DEV_SCHEME)
  end

  lane :buld_prod_stage do
    increment_build_number({
      build_number: latest_testflight_build_number(app_identifier: APP_IDENTIFIER) + 1
    })
    gym(
      workspace: WORKSPACE + ".xcworkspace",
      scheme: PROD_SCHEME,
      output_name: PROD_SCHEME + "-testflight.ipa",
      clean: true,
      output_directory: "."
    )
  end

  lane :build_dev_stage do
    increment_build_number({
      build_number: latest_testflight_build_number(app_identifier: APP_IDENTIFIER) + 1
    })
    gym(
      workspace: WORKSPACE + ".xcworkspace",
      scheme: DEV_SCHEME,
      output_name: DEV_SCHEME + "-testflight.ipa",
      clean: true,
      output_directory: "."
    )
  end

  lane :testflight_prod_stage do    
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      ipa: DEV_SCHEME + "-testflight.ipa",
      changelog: get_changelog
    )
  end

  lane :testflight_dev_stage do    
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      ipa: DEV_SCHEME + "-testflight.ipa",
      changelog: get_changelog
    )
  end

  lane :swiftlint_stage do
    swiftlint(
      mode: :lint,
      output_file: "swiftlint.result.json",
      config_file: ".swiftlint.yml",
      ignore_exit_status: false
    )
  end

end
